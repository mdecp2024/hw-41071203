<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">fqpabi8</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41071203">https://github.com/mdecp2024/hw-41071203</a></p>
<p>個人網站:<a href="https://mdecp2024.github.io/hw-41071203/">https://mdecp2024.github.io/hw-41071203/</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h2>w11_hw</h2>
<p><span>第一題</span></p>
<p><span>定義兩個函數，設定繪圖區大小，與使用者設定參數 請使用者輸入半徑，並將其轉換為整數 設定網格大小 n，確保最小網格大小為 20x20 計算圓心的 x 和 y 座標 使用雙重迴圈遍歷網格中的每個點 計算當前點到圓心的距離 函數用於計算距離與半徑的絕對差值 如果距離與半徑的絕對差值小於 1，則打印 '*'，否則打印空格 每行結束後換行</span></p>
<p><span>程式連結:</span> <a href="/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/7f93b2330fd05677ebe1a345e4192da6/raw/eeddf1dd851583a3b7c04190528b15758300e198/Homework_Star.py">*字圓形列印</a></p>
<p><span>第二題</span></p>
<p><span>利用 html 建立 canvas 超文件物件 每一格的 pixel 數 定義函數 dRect，用於繪製矩形 定義函數 grid，用於繪製網格 定義函數 draw_circle，用於繪製圓形 彈出訊息框讓用戶選擇模式 繪製網格 根據用戶選擇的模式繪製圓形</span></p>
<p>程式連結:<a href="/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/bd487a39cc154154061bfbf58cd428b4/raw/03b390342571c24578db4fa496c5434b3e6abbd7/Black_Circle.py">繪製圓形</a></p>
<p><span></span></p>
<p><span></span></p>
<p><span>心得 </span></p>
<p><span>我學到如何用gist製作一個可在網路上調用的腳本，提供給使用者自行設定，一開始遇到了一些麻煩，像是程式一直無法執行，或是繪圖區無法跑出來等等，所以我求助於網路與同學終於把作業用出來了，這次的作業一樣獲益良多。</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/sBN6t4Nj_-Y?si=_UXCplyXN02eyOiP" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p>
<p>第三題 :</p>
<p><a href="/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/709dffeb35368d6f0f56d1ee2f7344d0/raw/2cc1022e461552636d226f3a5bc0b8795fb94e7e/w11_wh-3.py">程式連結</a></p>
<p></p>
<h2>w10</h2>
<p>題目一</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">n = 5  # 總共的行數
space = '_'
for i in range(n):  # 對於每一行
    # 印出空格
    print(space * (n - i - 1), end='')  # 在每行前面印出空格
    # 印出星號
    print('*' * (2 * i + 1))  # 每行印出 2*i + 1 個星號</pre>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/POcd_tKEGyg?si=zHBPvKkuh_W0A2Fl" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<p></p>
<p>題目二</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/KHuTkpLC1d4?si=gkrOwiSvhm_ck9II" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<p>題目三</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/aAoy6PdmlIw?si=hsAqeu8JMKiYdUhg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<p></p>
<p><span>解題步驟:將老師提供的程式檔(problem-set1-1.py、problem-set1-2.py、problem-set1-3.py、problem-set2-1.py)分別輸入到自己網站的 Brython 頁面、SciTE 編輯器、Jupyter Lab，輸入完成後看程式是否能正常運行，以及計算的數值有無錯誤</span></p>
<p><span></span></p>
<p><span>心得:本題讓我體驗到程式運算的方便性，不用像以往還需要按工程計算機才能得出一個個數據，而是只要輸入程式就能將所有結果印出來，資料一目了然，非常的便利，但目前我只會用以上三種方法去執行程式，命令提示字元視窗與Codespaces 執行的部分還不熟悉，還需要再多加學習。</span></p>
<h2>W7</h2>
<p>我已經會寫簡單的python程式</p>
<p></p>
<h2>w12_hw</h2>
<p>Jupyter lab 可攜程式執行</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/fNognWqxJIc?si=nfaGujfLfSUSjipH" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/c529be27dc0af4e222263c445499f45e/raw/bda0b555b0fee3ec582909437ece27ce98147d29/01_string_input_print.py">01_string_input_print</a></div>
<div itemprop="about">程式語法解釋：<br/> help("input"):這行會調用 Python 內建的" help()"函數，並查詢有關"input()"函數的幫助文檔。"input()" 函數是 Python 的一個內建函數，常用來從使用者那裡獲取輸入。執行這行後，Python 會顯示"input()"函數的詳細說明，告訴你這個函數的用途、語法以及怎麼使用它。<br/>input()：用來從使用者那裡接收輸入。函數會顯示一個提示訊息，並等待使用者輸入資料。<br/>print()：用來輸出訊息到螢幕。可以是文字、數字或其他數據型態。<br/>字串 (string)：Python 中的字串是由一對引號（單引號 ' 或雙引號 "）包圍的字符。字串可以包含文字、符號、空格等。<br/>轉義字符 (\)：在字串中，反斜線 \ 是一個特殊字符，用來逃脫某些字符的特殊含義。比如 \_ 會顯示一個下劃線 ，而 \\ 會顯示一個反斜線。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/5783a19c55ad20c37fd47526df777944/raw/f1412049b1e368e5fd521af589b5a4c3d0687751/02_variables.py">02_variables</a></div>
<div itemprop="about">【name = input("What's your name?")】<br/> 會要求使用者輸入名字，並將使用者輸入的內容儲存在變數 name 中。<br/><br/>【favorite_food = input("What is your favorite food?")】<br/>會要求使用者輸入最喜歡的食物，並將使用者輸入的內容儲存在變數 favorite_food 中。<br/><br/>input() 函數：用來接收來自使用者的輸入。<br/>print() 函數：用來顯示訊息或變數的內容。<br/>字串連接：使用 + 來將字串合併。比如 "Hi! My name is " + name 將字串 "Hi! My name is " 和變數 name 的內容連接起來，形成一個新的字串。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/a615383248301b314550224264369616/raw/0e2829fa176481a1bf4ca05b6cb060e2ede70b13/03_list_if_in_else.py">03_list_if_in_else</a></div>
<div itemprop="about"># 開頭的文字不會執行，此為註解<br/>if 語句: if 是 Python 中的條件語句（conditional statement），用來根據某些條件判斷執行不同的程式碼。<br/>in 是 Python 中用來檢查某個元素是否存在於可迭代物件（如列表、字串、元組等）中的運算子。<br/>else: else 是 if 語句的另一部分，當 if 條件不成立（即 False）時，程式會執行 else 區塊中的程式碼。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/3926bfd8b27676e656e6ec0f22e15b41/raw/79791af5116b5afb797520b69664026b61976939/04_list_append_remove.py">04_list_append_remove</a></div>
<div itemprop="about">remove() 方法: remove() 是列表的方法，用來移除指定的元素。如果 item_to_remove 在購物清單中，這行會將它從 shopping_list 中刪除。<br/>注意：如果清單中有多個相同的元素，remove() 只會刪除第一個匹配的項目。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/61bb4a590508b8ebaf5bf7667a7b5371/raw/23d9928961cea29dff8c28ce23d430f430398623/05_list_index_pop_insert.py">05_list_index_pop_insert</a></div>
<div itemprop="about">index() 方法: 這行程式碼使用 index() 方法來查找 "salad" 這個項目在 todays_menu 列表中的索引位置。index() 方法會返回指定元素的索引，這裡是查找 "salad" 在列表中的位置。由於 "salad" 是列表中的第二個元素，它的索引為 1（在 Python 中，索引是從 0 開始的）。<br/>pop() 方法: 這行使用 pop() 方法，根據 side_dish_index（即索引 1）來移除列表中的元素。pop() 會刪除並返回該索引位置的元素。由於 side_dish_index 是 1，這會將列表中的 "salad" 移除。<br/><br/>刪除後，todays_menu 會變成 ['burger', 'coke']。<br/>insert() 方法: insert() 是列表的另一個方法，用來將指定的元素插入到指定的位置。<br/><br/>程式碼執行過程總結：<br/>1.初始的餐單是 ["burger", "salad", "coke"]。<br/>2.使用 index() 查找 "salad" 的索引位置，返回 1。<br/>3.使用 pop() 方法刪除 "salad"，更新餐單為 ['burger', 'coke']。<br/>4.使用 insert() 方法在位置 1 插入 "fries"，更新餐單為 ['burger', 'fries', 'coke']。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/3719cfc91a8ecc9004ad10c72b2a7895/raw/62de3d639dad036a0c72787c1eaf61f819ae0f57/06_list_slicing.py">06_list_slicing</a><br/>列表（List）: cities 是一個 Python 列表，使用 [] 來表示。列表中的元素是：<br/>{"San Diego"，"Prague"，"Cape Town"，"Tokyo"，"Melbourne"}，都是字串（string）。<br/>列表是一個有序的集合，因此每個元素都有對應的索引（從 0 開始）<br/><br/>【print(cities[1])】:索引（Indexing）: cities[1] 取出 cities 列表中索引為 1 的元素（記得 Python 的索引是從 0 開始的）。<br/><br/>【print(cities[::2])】:切片（Slicing）帶步長（Step）: cities[::2] 表示從列表的開頭到結尾，步長為 2，即每隔一個元素選取一次。<br/>所以選取的元素是：<br/>索引 0 ("San Diego")<br/>索引 2 ("Cape Town")<br/>索引 4 ("Melbourne")<br/><br/>【print(cities[-1])】:負索引（Negative Indexing）: 負索引從列表的末尾開始計算，cities[-1] 取出最後一個元素。<br/>所以 cities[-1] 返回 "Melbourne"。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/0bf0bd4763cd1086fad91b234af2a5a2/raw/bcbfc6f07e5da34b57142c6263f987c860fa2499/07_list_slicing_use.py">07_list_slicing_use</a></div>
<div itemprop="about">【senses[1] = "smell"】:索引（Indexing）: 這行將列表 senses 中索引為 1 的元素（即 "nose"）修改為 "smell"。<br/><br/>【senses[3:5] = ["taste", "touch"]】:切片（Slicing）: 這行是將 senses 列表中索引為 3 和 4 的兩個元素（即 "tongue" 和 "skin"）替換成兩個新元素 ["taste", "touch"]。<br/>因為我們是使用切片來替換兩個元素，所以 "tongue" 和 "skin" 被 ["taste", "touch"] 這兩個元素替換掉。<br/><br/>【senses[0:3:2] = ["sight", "hearing"]】:切片（Slicing）帶步長（Step）: 這行使用了步長 2 的切片。senses[0:3:2] 表示從索引 0 開始到索引 3（不包括 3）之間，並每隔一個元素選擇一次，選取的元素是：<br/>索引 0 ("eyes")<br/>索引 2 ("ears")<br/><br/>【planets = planets + ["Jupiter"]】:列表加法（List Concatenation）: 這行將列表 planets 和新列表 ["Jupiter"] 合併，將 "Jupiter" 加到 planets 列表的末尾。<br/><br/>del 刪除元素: del 關鍵字用來刪除列表中的元素。<br/><br/>【del house[4:6]】:del 刪除切片: 這行會刪除 house 列表中索引為 4 到 5 之間的元素。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/07379a35bf14d502f3c861d13e7411ac/raw/b9b44a7159ea24fd7ebbe784298ce699d05b85cc/08_for_range.py">08_for_range</a></div>
<div itemprop="about">【for index in range(0, 4):】<br/>for 迴圈: 這行表示一個迴圈，會遍歷從 0 到 3 的範圍（range(0, 4)）。index 是循環中的變數，代表當前的索引值，會依序取值 0，1，2，3。<br/><br/>【print("index: " + str(index))】<br/>print() 函數: 在每次循環中，這行會輸出當前索引 index 的值。str(index) 是將 index 轉換為字串，然後與 "index: " 這個字串連接起來。<br/><br/>【print("My friend " + friends[index] + "'s favorite dish is " + dishes[index])】<br/>字串連接（String Concatenation）: 這行會輸出每位朋友的名字和他們最喜歡的菜。friends[index] 取得對應的朋友名字，dishes[index] 取得對應的菜品名稱，並將它們組合成一句完整的句子。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/5535791982cb6287e6a5ba340ae33dd1/raw/d9005d0d8c8ef61337263a6b87860f48d7fc8b0c/09_for_loop_if_equals.py">09_for_loop_if_equals</a><br/>【for i in range(0, len(animals)):】<br/>for 迴圈: 這行啟動了一個迴圈，i 變數會依次取值從 0 到 len(animals) - 1（即 0, 1, 2）。len(animals) 會返回 animals 列表的長度（這裡是 3）。<br/>range(0, len(animals)) 會創建一個範圍 0, 1, 2，因此 i 會依次取得這些值。<br/><br/>【print("-- Beginning of loop --")】<br/>print() 函數: 這行會在每次進入迴圈時輸出一個標誌，表明當前是循環的開始：<br/><br/>【print("The element in position " + str(i) + " is " + animals[i])】<br/>索引（Indexing）: 這行會顯示當前元素在列表中的位置（由 i 指定）和該位置的動物名稱（通過 animals[i] 取得）。<br/>str(i) 是將 i 變數轉換為字串，這樣可以與其他字串合併。<br/><br/>【if animals[i] == wanted_to_see:】<br/>條件判斷（if 語句）: 這行檢查 animals[i] 是否等於 wanted_to_see（即 "penguin"）。如果 animals[i] 和 wanted_to_see 相等，表示當前看到的是使用者想要看的動物。<br/><br/>【else:】<br/>else 語句: 如果條件 animals[i] == wanted_to_see 為 False，則會執行 else 部分的程式碼，表示當前動物不是使用者想要看的動物。</div>
<div itemprop="about"></div>
<div itemprop="about"><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/82d1f98ff614bae6a961cdc5b663dd08/raw/1e81c0f838a28b22f3f345f4cfb2c9b0e31e8796/10_for_search.py">10_for_search</a><br/>1.【accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]】<br/>列表（List）: 這行創建了一個名為 accessories 的列表，包含五個元素（即不同的配件名稱）：<br/>"belt", "hat", "gloves", "sunglasses", "ring"<br/><br/>2. 【print(accessories)】<br/>print() 函數: 輸出 accessories 列表的內容，即顯示所有的配件名稱：<br/>css<br/>複製程式碼<br/>['belt', 'hat', 'gloves', 'sunglasses', 'ring']<br/><br/>3. 【for i in range(len(accessories)):】<br/>for 迴圈: 這個 for 迴圈會遍歷 accessories 列表的每一個位置，range(len(accessories)) 創建一個從 0 到 len(accessories) - 1 的範圍。len(accessories) 會返回 accessories 列表的長度，這裡是 5，因此迴圈將會執行 5 次，i 會依次取值 0，1，2，3，4。<br/><br/>4. 【print("The element " + accessories[i] + " is in position " + str(i))】<br/>索引（Indexing）: 這行會在每次迴圈中，根據當前的 i 值顯示 accessories[i]（即當前位置的配件名稱）和它的索引位置 i。str(i) 是將 i 轉換為字串，這樣可以與其他字串進行拼接。<br/><br/>5.【 for i in range(len(accessories)):<br/>if len(accessories[i]) == 6:<br/>print("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")】<br/>第二個 for 迴圈：<br/>條件判斷（if 語句）: 這段程式碼會遍歷列表，對每個配件的長度進行檢查。如果配件名稱的長度等於 6（len(accessories[i]) == 6），則會輸出該配件、位置及其字符長度。<br/><br/><br/>6. 【for i in range(len(accessories)):<br/>if len(accessories[i]) &lt; 6:<br/>print("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")】<br/>第三個 for 迴圈：<br/>條件判斷（if 語句）: 這段程式碼會檢查每個配件的長度是否小於 6。如果條件成立，則會顯示該配件、位置以及它的字符長度小於 6。<br/><br/>7. 【n_of_characters = 6<br/>for i in range(len(accessories)):<br/>if len(accessories[i]) &gt; n_of_characters:<br/>print("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")】<br/>第四個 for 迴圈：<br/>變數與條件判斷: 這段程式碼先定義了一個變數 n_of_characters = 6，用來設定檢查配件名稱長度的門檻。如果配件名稱的長度大於 n_of_characters（即 6），則會顯示配件、位置以及它的字符數大於 6。<br/><br/>8.【 n_of_characters = 6<br/>for i in range(len(accessories)):<br/>if len(accessories[i]) != n_of_characters:<br/>print("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))】<br/>第五個 for 迴圈：<br/>條件判斷（if 語句）: 這段程式碼檢查配件名稱的長度是否不等於 n_of_characters（即 6）。如果不等於，則會顯示該配件、它的位置及其字符數不同於 6。<br/><br/>9. 【position = 2<br/>for i in range(len(accessories)):<br/>if i &lt;= position:<br/>print("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))】<br/>第六個 for 迴圈：<br/>條件判斷（if 語句）: 這段程式碼定義了變數 position = 2，並檢查每個配件的索引 i 是否小於或等於 position。如果是，則顯示該配件、位置和其位置是否小於或等於 2。<br/><br/>10. 【position = 2<br/>for i in range(len(accessories)):<br/>if i &gt;= position:<br/>print("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))】<br/>第七個 for 迴圈：<br/>條件判斷（if 語句）: 這段程式碼也使用 position = 2，但這次檢查每個配件的索引 i 是否大於或等於 position。如果是，則顯示該配件、位置及其位置是否大於或等於 2。<br/><br/>程式語法總結<br/>for 迴圈：用來遍歷列表中的每個元素，range(len(accessories)) 創建一個範圍，讓 i 依次遍歷列表的所有索引。<br/>條件判斷（if 和 else）：根據條件判斷每個配件的屬性（例如，長度是否等於 6），然後執行相應的操作（顯示訊息）。<br/>字串連接（String Concatenation）：使用 + 將字串連接起來，並將變數與其他文字結合，形成需要輸出的訊息。<br/><br/>心得:這次試了不少程式，也上網找程式解釋，感覺有比較了解一點程式的運作原理，而且也越來越熟悉程式的操作以及倉儲維護。</div>
<div class="js-gist-file-update-container js-task-list-container"><task-lists><form accept-charset="UTF-8" action="https://gist.github.com/41071203/c529be27dc0af4e222263c445499f45e/file/ebd2d3a80ab66c4a74d57cfbe8ced3d86f1d46b6" class="js-comment-update" data-turbo="false" method="post">
<div class="file my-2" id="file-01_string_input_print-py">
<div class="file-header d-flex flex-md-items-center flex-items-start">
<div class="file-info pr-4 d-flex flex-md-items-center flex-items-start flex-order-1 flex-auto"></div>
</div>
</div>
</form></task-lists></div><h2>w13_hw</h2>
<p>程式連結:</p>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/0a6ca035ee99556d7e1ecaf8e40aa9bb/raw/594cbfd0d71e05c62edb4e0c963165fbe44a91c1/w13_wh-1.py">紅色正方形</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/0a6ca035ee99556d7e1ecaf8e40aa9bb/raw/1741eb15854bfb9c6264770045c7b58b8b8c7c39/w13_wh-2.py">紅色正方形重疊</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/0a6ca035ee99556d7e1ecaf8e40aa9bb/raw/1741eb15854bfb9c6264770045c7b58b8b8c7c39/w13_wh-3.py">不同區塊塗色</a><br/><br/></p>
<p>正方形頁面列印</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
 
from browser import html
from browser import document as doc

 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1
ctx.strokeStyle = 'red'
ctx.beginPath() 
ctx.rect(0, 0, 200, 200)
ctx.stroke()
</script>
</p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
 
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製兩個矩形
ctx.strokeStyle = 'red'  # 設定矩形顏色為紅色
ctx.beginPath() 
ctx.rect(10, 10, 200, 200)
ctx.rect(110, 110, 200, 200)
ctx.stroke()

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()
</script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

# 建立 canvas
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")

# 定義矩形和圓的參數
rect1 = {"x": 50, "y": 50, "w": 150, "h": 150}
rect2 = {"x": 125, "y": 125, "w": 150, "h": 150}
circle1 = {"cx": 125, "cy": 125, "r": 106.07}
circle2 = {"cx": 200, "cy": 200, "r": 106.07}

# 生成顏色函數
def generate_unique_color(index):
    # 增加顏色區分度，利用 HSL 色彩模式
    hue = (index * 137.508) % 360  # 保證每次的色調都不同，使用金比例分布避免聚集
    saturation = 70 + (index % 2) * 15  # 交替調整飽和度（70% 或 85%）
    lightness = 50 + (index % 3) * 10  # 交替調整亮度（50%、60% 或 70%）
    return f"hsl({hue:.2f}, {saturation}%, {lightness}%)"

# 填充函數
def fill_region(x, y, w, h, color):
    ctx.fillStyle = color
    ctx.fillRect(x, y, w, h)

# 判斷點是否在圓內
def is_point_in_circle(x, y, circle):
    return (x - circle["cx"])**2 + (y - circle["cy"])**2 <= circle["r"]**2

# 判斷點是否在矩形對角線上方或下方
def is_point_above_diagonal(x, y, rect):
    diagonal_slope = rect["h"] / rect["w"]
    rect_start_x, rect_start_y = rect["x"], rect["y"]
    relative_y = y - rect_start_y
    relative_x = x - rect_start_x
    return relative_y > diagonal_slope * relative_x

# 填充每個分割區域
step = 1  # 定義網格精度
region_colors = {}
region_index = 0

def is_point_in_rect(x, y, rect):
    return rect["x"] <= x <= rect["x"] + rect["w"] and rect["y"] <= y <= rect["y"] + rect["h"]

# 判斷點是否在圓內但不在矩形內
def is_point_in_circle_not_in_rect(x, y, circle, rect):
    return is_point_in_circle(x, y, circle) and not is_point_in_rect(x, y, rect)

# 判斷點與矩形頂點的相對象限
def get_quadrant(x, y, rect_vertex):
    if x >= rect_vertex[0] and y <= rect_vertex[1]:
        return 0  # 第一象限
    elif x <= rect_vertex[0] and y <= rect_vertex[1]:
        return 1  # 第二象限
    elif x <= rect_vertex[0] and y >= rect_vertex[1]:
        return 2  # 第三象限
    elif x >= rect_vertex[0] and y >= rect_vertex[1]:
        return 3  # 第四象限

# 新增的區域填充邏輯
for y in range(0, 400, step):
    for x in range(0, 400, step):
        # 判斷點是否屬於基本區域
        in_rect1 = is_point_in_rect(x, y, rect1)
        in_rect2 = is_point_in_rect(x, y, rect2)
        in_circle1 = is_point_in_circle(x, y, circle1)
        in_circle2 = is_point_in_circle(x, y, circle2)

        # 判斷點是否在矩形內或在外接圓內但不在矩形內
        in_circle1_not_in_rect1 = is_point_in_circle_not_in_rect(x, y, circle1, rect1)
        in_circle2_not_in_rect2 = is_point_in_circle_not_in_rect(x, y, circle2, rect2)

        # 增加對角線劃分判斷（僅限第一個矩形）
        above_diagonal1 = in_rect1 and is_point_above_diagonal(x, y, rect1)
        
        # 不考慮第二個矩形的對角線
        above_diagonal2 = False  # 明確禁用

        # 對不在矩形內的外接圓部分進行進一步劃分
        quadrant1 = get_quadrant(x, y, (rect1["x"], rect1["y"])) if in_circle1_not_in_rect1 else -1
        quadrant2 = get_quadrant(x, y, (rect2["x"], rect2["y"])) if in_circle2_not_in_rect2 else -1

        # 確定區域編號（包含外接圓的分象限條件）
        region_code = (
           (above_diagonal1 << 8) |                # 第一個矩形的對角線（僅第一個矩形適用）
           (quadrant1 << 6 if quadrant1 != -1 else 0) |  # 第一個圓的象限
           (quadrant2 << 4 if quadrant2 != -1 else 0) |  # 第二個圓的象限
           (in_circle1_not_in_rect1 << 3) |       # 第一個圓但不在第一個矩形內
           (in_circle2_not_in_rect2 << 2) |       # 第二個圓但不在第二個矩形內
           (in_rect1 << 1) |                      # 第一個矩形
           in_rect2                               # 第二個矩形
       )


        # 如果區域尚未分配顏色，為其生成一個新顏色
        if region_code not in region_colors:
            region_colors[region_code] = generate_unique_color(region_index)
            region_index += 1

        # 填充區域
        if region_code != 0:  # 跳過背景
            fill_region(x, y, step, step, region_colors[region_code])

# 繪製矩形的對角線
ctx.strokeStyle = "blue"
ctx.lineWidth = 2
ctx.beginPath()
ctx.moveTo(rect1["x"], rect1["y"])
ctx.lineTo(rect1["x"] + rect1["w"], rect1["y"] + rect1["h"])
ctx.stroke()
</script>
</p>
<p><br/><br/></p>
<div id="brython_div1"></div>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Wk3gu_1oAJM?si=N44ISzt5QWT_Sqdy" title="YouTube video player" width="560"></iframe></p>
<h3>w14_ex</h3>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/45357504b33326326ecb886b491f4981/raw/cc9c9ffff07cac3972f53915da93a548eb308b88/w14_wh_1.py">色彩圓形</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/45357504b33326326ecb886b491f4981/raw/cc9c9ffff07cac3972f53915da93a548eb308b88/w14_wh_2.py">色彩圓形移動版</a></p>
<h2>w15</h2>
<p><strong>老師範例:</strong></p>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/4cac5663bd9dd75c230f40b6e3ecfa21/raw/7dfe7c1ccb0d236789df10e5d20d131c91611c5c/w15-ex.py">w15_ex</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/4cac5663bd9dd75c230f40b6e3ecfa21/raw/43ea7fc4395d30caa13f5fdbf2a45722d9190d9d/w15-ex2.py">w15_ex2</a></p>
<p><strong>題目一:</strong></p>
<p><strong>程式連結:</strong><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/4cac5663bd9dd75c230f40b6e3ecfa21/raw/0bce974b75a92eeb983a95f047f6718134166ada/anchor.py">anchor</a></p>
<p><strong>程式解釋:</strong></p>
<p>程式碼的目的是生成從<span> 0 </span>到<span> 100 </span>的所有數字，然後將它們加總，並將結果顯示出來。</p>
<p>「<span>range(101) </span>」生成從<span> 0 </span>到<span> 100 </span>的數字，「<span>sum()</span>」計算這些數字的總和，結果是<span> 5050</span>。</p>
<p>最後，程式將結果輸出顯示。</p>
<p></p>
<p><strong>題目二:</strong></p>
<p><strong>程式連結: </strong><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/4cac5663bd9dd75c230f40b6e3ecfa21/raw/0bce974b75a92eeb983a95f047f6718134166ada/addto.py">addto</a></p>
<p><strong>程式解釋:</strong></p>
<p>「<span>addto</span>」函數的目的是計算從「<span>start</span>」到「<span>end</span>」（包括 <span>end</span>）的所有數字的總和。</p>
<p>透過 <span>for </span>迴圈，函數逐一將這些數字加總，並返回最終結果。</p>
<p>例如，<span>addto(1, 100) </span>會計算從<span> 1 </span>加到<span> 100 </span>的總和，結果是 <span>5050</span>。</p>
<p>程式最後將這個結果顯示出來。</p>
<p></p>
<p><strong>題目三:</strong></p>
<p><strong>程式連結:</strong> <a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/4cac5663bd9dd75c230f40b6e3ecfa21/raw/ea03aa8f57f7a82994fb579a351f8b5b1e554039/add_only_even.py">add_only_even</a></p>
<p><strong>程式解釋:</strong></p>
<p><strong>函數定義<span> (def)</span></strong><strong>：</strong></p>
<p><strong>「<span>add_only_even</span></strong><strong>」函數用來計算指定範圍內偶數的總和。</strong></p>
<p><strong>「<span>get_circle_input</span></strong><strong>」函數用來從用戶那裡獲取範圍的數字。</strong></p>
<p><strong>條件判斷<span> (if)</span></strong><strong>：</strong></p>
<p><strong>在「<span>add_only_even</span></strong><strong>」函數內，使用「<span>if i % 2 == 0</span></strong><strong>」來檢查每個數字是否為偶數。</strong></p>
<p><strong>迴圈<span> (for)</span></strong><strong>：</strong></p>
<p><strong>使用 <span>for </span></strong><strong>迴圈來遍歷範圍內的數字。</strong></p>
<p><strong>字串格式化<span> (f-string)</span></strong><strong>：</strong></p>
<p><strong>使用「<span>print(f"")</span></strong><strong>」來格式化輸出的字串，將計算結果插入到字串中顯示。</strong></p>
<p><strong></strong></p>
<p><strong>題目四:</strong></p>
<p><strong>程式連結:</strong> <a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/4cac5663bd9dd75c230f40b6e3ecfa21/raw/f1d34a21439ed4f31a1ecf9c51c6751ec0356a1a/add_avoid_8.py">add_avoid_8</a></p>
<p><strong>程式解釋:</strong></p>
<p>程式主要功能是從「<span>start</span>」到「<span>end</span>」計算總和，但避開所有包含數字<span> "8" </span>的數字。</p>
<p>使用 <span>for </span>迴圈遍歷每個數字，並使用「<span>if '8' in str(i)</span>」來檢查數字中是否包含 <span>“8”</span>。</p>
<p>如果數字不包含 <span>“8”</span>，則將其加入總和並顯示最終結果。</p>
<p></p>
<p><strong>心得:</strong></p>
<p>這次的題目很快就做出來了，相比之前常常做不出來要到處求助同學與老師的狀況相比好上不少，感覺有明顯的進步，第三題與第四題蠻好玩的，感覺之後可以嘗試不同的變化。</p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/14ec49dc8f5d4a03f1f5c4ff37bc363e/raw/bb3bae1145b6d4a39745ae011ca3b3067a59bbc5/draw.py">exam_16_1</a></p>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/14ec49dc8f5d4a03f1f5c4ff37bc363e/raw/07dafe890378c299e00a48f3df35a38dbcb59b18/draw2.py"></a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
import math
from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=500, height=400)
brython_div = doc["brython_div1"]
brython_div <= canvas

# 設定畫布
ctx = canvas.getContext("2d")

# 設定原點座標
origin_x, origin_y = 12, 3
pixel = 2  # 調整比例大小

# 繪製 X 軸
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(canvas.width, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = pixel
ctx.stroke()

# 繪製 Y 軸
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, canvas.height)
ctx.strokeStyle = "black"
ctx.lineWidth = pixel
ctx.stroke()

# 標示原點座標
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText(f"({origin_x}, {origin_y})", origin_x + 3, origin_y + 15)

# 位移偏移量，使圖形與參考圖片一致
offset_x = 31
offset_y = 53

# 繪製橙色六邊形
ctx.beginPath()
ctx.fillStyle = "#F47920"
ctx.moveTo(offset_x + 30, offset_y + 40)
ctx.lineTo(offset_x + 50, offset_y + 20)
ctx.lineTo(offset_x + 80, offset_y + 20)
ctx.lineTo(offset_x + 100, offset_y + 40)
ctx.lineTo(offset_x + 80, offset_y + 60)
ctx.lineTo(offset_x + 50, offset_y + 60)
ctx.closePath()
ctx.fill()

# 繪製綠色菱形
ctx.beginPath()
ctx.fillStyle = "#009F95"
ctx.moveTo(offset_x + 110, offset_y + 40)
ctx.lineTo(offset_x + 130, offset_y + 20)
ctx.lineTo(offset_x + 150, offset_y + 40)
ctx.lineTo(offset_x + 130, offset_y + 60)
ctx.closePath()
ctx.fill()

# 繪製藍色三角形
ctx.beginPath()
ctx.fillStyle = "#40B4CB"
ctx.moveTo(offset_x + 160, offset_y + 40)
ctx.lineTo(offset_x + 140, offset_y + 60)
ctx.lineTo(offset_x + 180, offset_y + 60)
ctx.closePath()
ctx.fill()

# 繪製粉紅色圓形
ctx.beginPath()
ctx.fillStyle = "#EB008B"
ctx.arc(offset_x + 200, offset_y + 40, 12, 0, 2 * math.pi)
ctx.fill()

# 繪製黃色正方形
ctx.beginPath()
ctx.fillStyle = "#FDD56A"
ctx.rect(offset_x + 230, offset_y + 20, 25, 25)
ctx.fill()

# 繪製藍色長方形
ctx.beginPath()
ctx.fillStyle = "#003A70"
ctx.rect(offset_x + 270, offset_y + 30, 40, 15)
ctx.fill()
</script>
</p>
<div id="brython_div1"></div><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/14ec49dc8f5d4a03f1f5c4ff37bc363e/raw/07dafe890378c299e00a48f3df35a38dbcb59b18/draw2.py">exam_16_2</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 建立畫布
canvas = html.CANVAS(width=300, height=300)  # 設定迷宮畫布大小
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得畫布的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (12, 3)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(12, 3)", 16, 15)

# 定義藍色線條的屬性
ctx.strokeStyle = "blue"
ctx.lineWidth = 2

# 起點 (12, 3)
offset_x = 12
offset_y = 3

# 定義所有線條的起點和終點
lines = [
    [(0, 0), (86, 0)],   # 上邊
    [(0, 0), (0, 200)],  # 左邊
    [(120, 0), (200, 0)], # 右上
    [(200, 0), (200, 200)], # 右邊
    [(200, 200), (120, 200)], # 右下
    [(0, 200), (86, 200)], # 左下
    [(86, 157), (86, 200)], # 垂直連接
    [(86, 157), (126, 157)], # 水平連接
    [(160, 120), (160, 200)], # 右中
    [(160, 120), (50, 120)], # 左中
    [(50, 120), (50, 163)], # 左中垂直
    [(126, 80), (126, 120)], # 中間垂直
    [(0, 80), (86, 80)],  # 左上水平
    [(86, 40), (86, 80)], # 左上垂直
    [(40, 40), (160, 40)], # 上中水平
    [(160, 40), (160, 83)], # 上右垂直
]

# 繪製所有線條
ctx.beginPath()
for start, end in lines:
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])
ctx.stroke()
</script>
</p>
<div id="brython_div1"></div><h3>W5</h3>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#單行註解
#help(print)
'''這個三引號所界定的區域
被python視為多行註解
'''
a="一個字串"
a=24
a=24.5
print(a)
b=print(a,a,a,sep='*')
print(b)//b沒有賦予變數，結果為None

</pre>
<p></p>
<p>數字列印</p>
<p></p>
<p>星星迴圈</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#help(range)
a=5
b=a*2+1
for i in range(1,b,2):
    move=round((b-i)/2)-1
    print(f'  '*move,end='')
    print('*'*i)</pre>
<p></p>
<h3>W6</h3>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
<li><img alt="" height="450" src="/images/螢幕擷取畫面 2024-10-16 115953.png" width="800"/><img alt="" height="450" src="/images/螢幕擷取畫面 2024-10-16 114341.png" width="800"/></li>
</ol>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h4>w6</h4>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-41071203/content/Brython?src=https://gist.githubusercontent.com/41071203/14ec49dc8f5d4a03f1f5c4ff37bc363e/raw/5aa7b787da94aa0012d9e639490b30eeba99d799/draw3.py">exam_16_3</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc

# 建立畫布
canvas = html.CANVAS(width=300, height=300)  # 設定迷宮畫布大小
brython_div = doc["brython_div1"]
brython_div <= canvas

# 取得畫布的繪圖上下文
ctx = canvas.getContext("2d")

# 標示左上方點座標 (12, 3)
ctx.font = "12px Arial"
ctx.fillStyle = "red"
ctx.fillText("(12, 3)", 16, 15)

# 定義藍色線條的屬性
ctx.strokeStyle = "black"
ctx.lineWidth = 2

# 起點 (12, 3)
offset_x = 12
offset_y = 3

# 定義所有線條的起點和終點
lines = [
    [(0, 0), (86, 0)],   # 上邊
    [(0, 0), (0, 200)],  # 左邊
    [(120, 0), (200, 0)], # 右上
    [(200, 0), (200, 200)], # 右邊
    [(200, 200), (120, 200)], # 右下
    [(0, 200), (86, 200)], # 左下
    [(86, 157), (86, 200)], # 垂直連接
    [(86, 157), (126, 157)], # 水平連接
    [(160, 120), (160, 200)], # 右中
    [(160, 120), (50, 120)], # 左中
    [(50, 120), (50, 163)], # 左中垂直
    [(126, 80), (126, 120)], # 中間垂直
    [(0, 80), (86, 80)],  # 左上水平
    [(86, 40), (86, 80)], # 左上垂直
    [(40, 40), (160, 40)], # 上中水平
    [(160, 40), (160, 83)], # 上右垂直
]

# 繪製所有線條
ctx.beginPath()
for start, end in lines:
    ctx.moveTo(offset_x + start[0], offset_y + start[1])
    ctx.lineTo(offset_x + end[0], offset_y + end[1])
ctx.stroke()

# 定義紅色線條的屬性
ctx.strokeStyle = "red"
ctx.lineWidth = 2

# 定義紅色路線的點
path = [
    (90, 0), (90, 25), (195, 25), (195, 90), (150, 90),
    (150, 70), (120, 70), (120, 90), (30, 90), (30, 180),
    (65, 180), (65, 150), (150, 150), (150, 170),(110, 170), (110, 220)
]

# 繪製紅色路線
ctx.beginPath()
ctx.moveTo(offset_x + path[0][0], offset_y + path[0][1])
for point in path[1:]:
    ctx.lineTo(offset_x + point[0], offset_y + point[1])
ctx.stroke()
</script>
</p>
<div id="brython_div1"></div><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
