var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼:\xa0 fqpabi8 \n 個人倉儲: https://github.com/mdecp2024/hw-41071203 \n 個人網站: https://mdecp2024.github.io/hw-41071203/ \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w11_hw', 'text': "第一題 \n 定義兩個函數，設定繪圖區大小，與使用者設定參數 請使用者輸入半徑，並將其轉換為整數 設定網格大小 n，確保最小網格大小為 20x20 計算圓心的 x 和 y 座標 使用雙重迴圈遍歷網格中的每個點 計算當前點到圓心的距離 函數用於計算距離與半徑的絕對差值 如果距離與半徑的絕對差值小於 1，則打印 '*'，否則打印空格 每行結束後換行 \n 程式連結: \xa0 *字圓形列印 \n 第二題 \n 利用 html 建立 canvas 超文件物件 每一格的 pixel 數 定義函數 dRect，用於繪製矩形 定義函數 grid，用於繪製網格 定義函數 draw_circle，用於繪製圓形 彈出訊息框讓用戶選擇模式 繪製網格 根據用戶選擇的模式繪製圓形 \n 程式連結: 繪製圓形 \n \n \n 心得  \n 我學到如何用gist製作一個可在網路上調用的腳本，提供給使用者自行設定，一開始遇到了一些麻煩，像是程式一直無法執行，或是繪圖區無法跑出來等等，所以我求助於網路與同學終於把作業用出來了，這次的作業一樣獲益良多。 \n \n \n \n 第三題 : \n 程式連結 \n \n", 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w10', 'text': "題目一 \n n = 5  # 總共的行數\nspace = '_'\nfor i in range(n):  # 對於每一行\n    # 印出空格\n    print(space * (n - i - 1), end='')  # 在每行前面印出空格\n    # 印出星號\n    print('*' * (2 * i + 1))  # 每行印出 2*i + 1 個星號 \n \n \n 題目二 \n \n 題目三 \n \n \n 解題步驟:將老師提供的程式檔(problem-set1-1.py、problem-set1-2.py、problem-set1-3.py、problem-set2-1.py)分別輸入到自己網站的 Brython 頁面、SciTE 編輯器、Jupyter Lab，輸入完成後看程式是否能正常運行，以及計算的數值有無錯誤 \n \n 心得:本題讓我體驗到程式運算的方便性，不用像以往還需要按工程計算機才能得出一個個數據，而是只要輸入程式就能將所有結果印出來，資料一目了然，非常的便利，但目前我只會用以上三種方法去執行程式，命令提示字元視窗與Codespaces 執行的部分還不熟悉，還需要再多加學習。 \n", 'tags': '', 'url': 'w10.html'}, {'title': 'W7', 'text': '我已經會寫簡單的python程式 \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'w12_hw', 'text': 'Jupyter lab 可攜程式執行 \n \n 01_string_input_print \n 程式語法解釋：  help("input"):這行會調用 Python 內建的" help()"函數，並查詢有關"input()"函數的幫助文檔。"input()" 函數是 Python 的一個內建函數，常用來從使用者那裡獲取輸入。執行這行後，Python 會顯示"input()"函數的詳細說明，告訴你這個函數的用途、語法以及怎麼使用它。 input()：用來從使用者那裡接收輸入。函數會顯示一個提示訊息，並等待使用者輸入資料。 print()：用來輸出訊息到螢幕。可以是文字、數字或其他數據型態。 字串 (string)：Python 中的字串是由一對引號（單引號 \' 或雙引號 "）包圍的字符。字串可以包含文字、符號、空格等。 轉義字符 (\\)：在字串中，反斜線 \\ 是一個特殊字符，用來逃脫某些字符的特殊含義。比如 \\_ 會顯示一個下劃線 ，而 \\\\ 會顯示一個反斜線。 \n \n 02_variables \n 【name = input("What\'s your name?")】  會要求使用者輸入名字，並將使用者輸入的內容儲存在變數 name 中。 【favorite_food = input("What is your favorite food?")】 會要求使用者輸入最喜歡的食物，並將使用者輸入的內容儲存在變數 favorite_food 中。 input() 函數：用來接收來自使用者的輸入。 print() 函數：用來顯示訊息或變數的內容。 字串連接：使用 + 來將字串合併。比如 "Hi! My name is " + name 將字串 "Hi! My name is " 和變數 name 的內容連接起來，形成一個新的字串。 \n \n 03_list_if_in_else \n # 開頭的文字不會執行，此為註解 if 語句: if 是 Python 中的條件語句（conditional statement），用來根據某些條件判斷執行不同的程式碼。 in 是 Python 中用來檢查某個元素是否存在於可迭代物件（如列表、字串、元組等）中的運算子。 else: else 是 if 語句的另一部分，當 if 條件不成立（即 False）時，程式會執行 else 區塊中的程式碼。 \n \n 04_list_append_remove \n remove() 方法: remove() 是列表的方法，用來移除指定的元素。如果 item_to_remove 在購物清單中，這行會將它從 shopping_list 中刪除。 注意：如果清單中有多個相同的元素，remove() 只會刪除第一個匹配的項目。 \n \n 05_list_index_pop_insert \n index() 方法: 這行程式碼使用 index() 方法來查找 "salad" 這個項目在 todays_menu 列表中的索引位置。index() 方法會返回指定元素的索引，這裡是查找 "salad" 在列表中的位置。由於 "salad" 是列表中的第二個元素，它的索引為 1（在 Python 中，索引是從 0 開始的）。 pop() 方法: 這行使用 pop() 方法，根據 side_dish_index（即索引 1）來移除列表中的元素。pop() 會刪除並返回該索引位置的元素。由於 side_dish_index 是 1，這會將列表中的 "salad" 移除。 刪除後，todays_menu 會變成 [\'burger\', \'coke\']。 insert() 方法: insert() 是列表的另一個方法，用來將指定的元素插入到指定的位置。 程式碼執行過程總結： 1.初始的餐單是 ["burger", "salad", "coke"]。 2.使用 index() 查找 "salad" 的索引位置，返回 1。 3.使用 pop() 方法刪除 "salad"，更新餐單為 [\'burger\', \'coke\']。 4.使用 insert() 方法在位置 1 插入 "fries"，更新餐單為 [\'burger\', \'fries\', \'coke\']。 \n \n 06_list_slicing 列表（List）: cities 是一個 Python 列表，使用 [] 來表示。列表中的元素是： {"San Diego"，"Prague"，"Cape Town"，"Tokyo"，"Melbourne"}，都是字串（string）。 列表是一個有序的集合，因此每個元素都有對應的索引（從 0 開始） 【print(cities[1])】:索引（Indexing）: cities[1] 取出 cities 列表中索引為 1 的元素（記得 Python 的索引是從 0 開始的）。 【print(cities[::2])】:切片（Slicing）帶步長（Step）: cities[::2] 表示從列表的開頭到結尾，步長為 2，即每隔一個元素選取一次。 所以選取的元素是： 索引 0 ("San Diego") 索引 2 ("Cape Town") 索引 4 ("Melbourne") 【print(cities[-1])】:負索引（Negative Indexing）: 負索引從列表的末尾開始計算，cities[-1] 取出最後一個元素。 所以 cities[-1] 返回 "Melbourne"。 \n \n 07_list_slicing_use \n 【senses[1] = "smell"】:索引（Indexing）: 這行將列表 senses 中索引為 1 的元素（即 "nose"）修改為 "smell"。 【senses[3:5] = ["taste", "touch"]】:切片（Slicing）: 這行是將 senses 列表中索引為 3 和 4 的兩個元素（即 "tongue" 和 "skin"）替換成兩個新元素 ["taste", "touch"]。 因為我們是使用切片來替換兩個元素，所以 "tongue" 和 "skin" 被 ["taste", "touch"] 這兩個元素替換掉。 【senses[0:3:2] = ["sight", "hearing"]】:切片（Slicing）帶步長（Step）: 這行使用了步長 2 的切片。senses[0:3:2] 表示從索引 0 開始到索引 3（不包括 3）之間，並每隔一個元素選擇一次，選取的元素是： 索引 0 ("eyes") 索引 2 ("ears") 【planets = planets + ["Jupiter"]】:列表加法（List Concatenation）: 這行將列表 planets 和新列表 ["Jupiter"] 合併，將 "Jupiter" 加到 planets 列表的末尾。 del 刪除元素: del 關鍵字用來刪除列表中的元素。 【del house[4:6]】:del 刪除切片: 這行會刪除 house 列表中索引為 4 到 5 之間的元素。 \n \n 08_for_range \n 【for index in range(0, 4):】 for 迴圈: 這行表示一個迴圈，會遍歷從 0 到 3 的範圍（range(0, 4)）。index 是循環中的變數，代表當前的索引值，會依序取值 0，1，2，3。 【print("index: " + str(index))】 print() 函數: 在每次循環中，這行會輸出當前索引 index 的值。str(index) 是將 index 轉換為字串，然後與 "index: " 這個字串連接起來。 【print("My friend " + friends[index] + "\'s favorite dish is " + dishes[index])】 字串連接（String Concatenation）: 這行會輸出每位朋友的名字和他們最喜歡的菜。friends[index] 取得對應的朋友名字，dishes[index] 取得對應的菜品名稱，並將它們組合成一句完整的句子。 \n \n 09_for_loop_if_equals 【for i in range(0, len(animals)):】 for 迴圈: 這行啟動了一個迴圈，i 變數會依次取值從 0 到 len(animals) - 1（即 0, 1, 2）。len(animals) 會返回 animals 列表的長度（這裡是 3）。 range(0, len(animals)) 會創建一個範圍 0, 1, 2，因此 i 會依次取得這些值。 【print("-- Beginning of loop --")】 print() 函數: 這行會在每次進入迴圈時輸出一個標誌，表明當前是循環的開始： 【print("The element in position " + str(i) + " is " + animals[i])】 索引（Indexing）: 這行會顯示當前元素在列表中的位置（由 i 指定）和該位置的動物名稱（通過 animals[i] 取得）。 str(i) 是將 i 變數轉換為字串，這樣可以與其他字串合併。 【if animals[i] == wanted_to_see:】 條件判斷（if 語句）: 這行檢查 animals[i] 是否等於 wanted_to_see（即 "penguin"）。如果 animals[i] 和 wanted_to_see 相等，表示當前看到的是使用者想要看的動物。 【else:】 else 語句: 如果條件 animals[i] == wanted_to_see 為 False，則會執行 else 部分的程式碼，表示當前動物不是使用者想要看的動物。 \n \n 10_for_search 1.【accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]】 列表（List）: 這行創建了一個名為 accessories 的列表，包含五個元素（即不同的配件名稱）： "belt", "hat", "gloves", "sunglasses", "ring" 2. 【print(accessories)】 print() 函數: 輸出 accessories 列表的內容，即顯示所有的配件名稱： css 複製程式碼 [\'belt\', \'hat\', \'gloves\', \'sunglasses\', \'ring\'] 3. 【for i in range(len(accessories)):】 for 迴圈: 這個 for 迴圈會遍歷 accessories 列表的每一個位置，range(len(accessories)) 創建一個從 0 到 len(accessories) - 1 的範圍。len(accessories) 會返回 accessories 列表的長度，這裡是 5，因此迴圈將會執行 5 次，i 會依次取值 0，1，2，3，4。 4. 【print("The element " + accessories[i] + " is in position " + str(i))】 索引（Indexing）: 這行會在每次迴圈中，根據當前的 i 值顯示 accessories[i]（即當前位置的配件名稱）和它的索引位置 i。str(i) 是將 i 轉換為字串，這樣可以與其他字串進行拼接。 5.【 for i in range(len(accessories)): if len(accessories[i]) == 6: print("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")】 第二個 for 迴圈： 條件判斷（if 語句）: 這段程式碼會遍歷列表，對每個配件的長度進行檢查。如果配件名稱的長度等於 6（len(accessories[i]) == 6），則會輸出該配件、位置及其字符長度。 6. 【for i in range(len(accessories)): if len(accessories[i]) < 6: print("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")】 第三個 for 迴圈： 條件判斷（if 語句）: 這段程式碼會檢查每個配件的長度是否小於 6。如果條件成立，則會顯示該配件、位置以及它的字符長度小於 6。 7. 【n_of_characters = 6 for i in range(len(accessories)): if len(accessories[i]) > n_of_characters: print("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")】 第四個 for 迴圈： 變數與條件判斷: 這段程式碼先定義了一個變數 n_of_characters = 6，用來設定檢查配件名稱長度的門檻。如果配件名稱的長度大於 n_of_characters（即 6），則會顯示配件、位置以及它的字符數大於 6。 8.【 n_of_characters = 6 for i in range(len(accessories)): if len(accessories[i]) != n_of_characters: print("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))】 第五個 for 迴圈： 條件判斷（if 語句）: 這段程式碼檢查配件名稱的長度是否不等於 n_of_characters（即 6）。如果不等於，則會顯示該配件、它的位置及其字符數不同於 6。 9. 【position = 2 for i in range(len(accessories)): if i <= position: print("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))】 第六個 for 迴圈： 條件判斷（if 語句）: 這段程式碼定義了變數 position = 2，並檢查每個配件的索引 i 是否小於或等於 position。如果是，則顯示該配件、位置和其位置是否小於或等於 2。 10. 【position = 2 for i in range(len(accessories)): if i >= position: print("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))】 第七個 for 迴圈： 條件判斷（if 語句）: 這段程式碼也使用 position = 2，但這次檢查每個配件的索引 i 是否大於或等於 position。如果是，則顯示該配件、位置及其位置是否大於或等於 2。 程式語法總結 for 迴圈：用來遍歷列表中的每個元素，range(len(accessories)) 創建一個範圍，讓 i 依次遍歷列表的所有索引。 條件判斷（if 和 else）：根據條件判斷每個配件的屬性（例如，長度是否等於 6），然後執行相應的操作（顯示訊息）。 字串連接（String Concatenation）：使用 + 將字串連接起來，並將變數與其他文字結合，形成需要輸出的訊息。 心得:這次試了不少程式，也上網找程式解釋，感覺有比較了解一點程式的運作原理，而且也越來越熟悉程式的操作以及倉儲維護。 \n \n \n \n \n \n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '程式連結: \n 紅色正方形 \n 紅色正方形重疊 \n 不同區塊塗色 \n 正方形頁面列印 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n  啟動 Brython  \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '色彩圓形 \n 色彩圓形移動版 \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': '老師範例: \n w15_ex \n w15_ex2 \n 題目一: \n 程式連結: anchor \n 程式解釋: \n 程式碼的目的是生成從  0  到  100  的所有數字，然後將它們加總，並將結果顯示出來。 \n 「 range(101)  」生成從  0  到  100  的數字，「 sum() 」計算這些數字的總和，結果是  5050 。 \n 最後，程式將結果輸出顯示。 \n \n 題目二: \n 程式連結:\xa0 addto \n 程式解釋: \n 「 addto 」函數的目的是計算從「 start 」到「 end 」（包括  end ）的所有數字的總和。 \n 透過  for  迴圈，函數逐一將這些數字加總，並返回最終結果。 \n 例如， addto(1, 100)  會計算從  1  加到  100  的總和，結果是  5050 。 \n 程式最後將這個結果顯示出來。 \n \n 題目三: \n 程式連結: \xa0 add_only_even \n 程式解釋: \n 函數定義  (def) ： \n 「 add_only_even 」函數用來計算指定範圍內偶數的總和。 \n 「 get_circle_input 」函數用來從用戶那裡獲取範圍的數字。 \n 條件判斷  (if) ： \n 在「 add_only_even 」函數內，使用「 if i % 2 == 0 」來檢查每個數字是否為偶數。 \n 迴圈  (for) ： \n 使用  for  迴圈來遍歷範圍內的數字。 \n 字串格式化  (f-string) ： \n 使用「 print(f"") 」來格式化輸出的字串，將計算結果插入到字串中顯示。 \n \n 題目四: \n 程式連結: \xa0 add_avoid_8 \n 程式解釋: \n 程式主要功能是從「 start 」到「 end 」計算總和，但避開所有包含數字  "8"  的數字。 \n 使用  for  迴圈遍歷每個數字，並使用「 if \'8\' in str(i) 」來檢查數字中是否包含  “8” 。 \n 如果數字不包含  “8” ，則將其加入總和並顯示最終結果。 \n \n 心得: \n 這次的題目很快就做出來了，相比之前常常做不出來要到處求助同學與老師的狀況相比好上不少，感覺有明顯的進步，第三題與第四題蠻好玩的，感覺之後可以嘗試不同的變化。', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n \n \n anchor \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n \n \n anchor \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'W5', 'text': '#單行註解\n#help(print)\n\'\'\'這個三引號所界定的區域\n被python視為多行註解\n\'\'\'\na="一個字串"\na=24\na=24.5\nprint(a)\nb=print(a,a,a,sep=\'*\')\nprint(b)//b沒有賦予變數，結果為None\n\n \n \n 數字列印 \n \n 星星迴圈 \n #help(range)\na=5\nb=a*2+1\nfor i in range(1,b,2):\n    move=round((b-i)/2)-1\n    print(f\'  \'*move,end=\'\')\n    print(\'*\'*i) \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '\n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \n \n', 'tags': '', 'url': 'W6.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n w6 \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': '\n \n \n \n  啟動 Brython  \n \n \n \n \n \n anchor \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}]};